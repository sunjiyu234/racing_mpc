// Generated by gencpp from file ltv_mpc/gp_srvRequest.msg
// DO NOT EDIT!


#ifndef LTV_MPC_MESSAGE_GP_SRVREQUEST_H
#define LTV_MPC_MESSAGE_GP_SRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ltv_mpc/gpinput.h>

namespace ltv_mpc
{
template <class ContainerAllocator>
struct gp_srvRequest_
{
  typedef gp_srvRequest_<ContainerAllocator> Type;

  gp_srvRequest_()
    : gp_input_now()  {
    }
  gp_srvRequest_(const ContainerAllocator& _alloc)
    : gp_input_now(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ltv_mpc::gpinput_<ContainerAllocator>  _gp_input_now_type;
  _gp_input_now_type gp_input_now;





  typedef boost::shared_ptr< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct gp_srvRequest_

typedef ::ltv_mpc::gp_srvRequest_<std::allocator<void> > gp_srvRequest;

typedef boost::shared_ptr< ::ltv_mpc::gp_srvRequest > gp_srvRequestPtr;
typedef boost::shared_ptr< ::ltv_mpc::gp_srvRequest const> gp_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ltv_mpc::gp_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ltv_mpc::gp_srvRequest_<ContainerAllocator1> & lhs, const ::ltv_mpc::gp_srvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.gp_input_now == rhs.gp_input_now;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ltv_mpc::gp_srvRequest_<ContainerAllocator1> & lhs, const ::ltv_mpc::gp_srvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ltv_mpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c2b789bc37b75ef90e43a0e84365208";
  }

  static const char* value(const ::ltv_mpc::gp_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c2b789bc37b75efULL;
  static const uint64_t static_value2 = 0x90e43a0e84365208ULL;
};

template<class ContainerAllocator>
struct DataType< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ltv_mpc/gp_srvRequest";
  }

  static const char* value(const ::ltv_mpc::gp_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gpinput gp_input_now\n"
"\n"
"================================================================================\n"
"MSG: ltv_mpc/gpinput\n"
"float64 v\n"
"float64 r\n"
"float64 beta\n"
"float64 Tf\n"
"float64 Tr\n"
"float64 Steer\n"
;
  }

  static const char* value(const ::ltv_mpc::gp_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gp_input_now);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gp_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ltv_mpc::gp_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ltv_mpc::gp_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "gp_input_now: ";
    s << std::endl;
    Printer< ::ltv_mpc::gpinput_<ContainerAllocator> >::stream(s, indent + "  ", v.gp_input_now);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LTV_MPC_MESSAGE_GP_SRVREQUEST_H
