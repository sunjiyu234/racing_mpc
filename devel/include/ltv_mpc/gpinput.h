// Generated by gencpp from file ltv_mpc/gpinput.msg
// DO NOT EDIT!


#ifndef LTV_MPC_MESSAGE_GPINPUT_H
#define LTV_MPC_MESSAGE_GPINPUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ltv_mpc
{
template <class ContainerAllocator>
struct gpinput_
{
  typedef gpinput_<ContainerAllocator> Type;

  gpinput_()
    : v(0.0)
    , r(0.0)
    , beta(0.0)
    , Tf(0.0)
    , Tr(0.0)
    , Steer(0.0)  {
    }
  gpinput_(const ContainerAllocator& _alloc)
    : v(0.0)
    , r(0.0)
    , beta(0.0)
    , Tf(0.0)
    , Tr(0.0)
    , Steer(0.0)  {
  (void)_alloc;
    }



   typedef double _v_type;
  _v_type v;

   typedef double _r_type;
  _r_type r;

   typedef double _beta_type;
  _beta_type beta;

   typedef double _Tf_type;
  _Tf_type Tf;

   typedef double _Tr_type;
  _Tr_type Tr;

   typedef double _Steer_type;
  _Steer_type Steer;





  typedef boost::shared_ptr< ::ltv_mpc::gpinput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ltv_mpc::gpinput_<ContainerAllocator> const> ConstPtr;

}; // struct gpinput_

typedef ::ltv_mpc::gpinput_<std::allocator<void> > gpinput;

typedef boost::shared_ptr< ::ltv_mpc::gpinput > gpinputPtr;
typedef boost::shared_ptr< ::ltv_mpc::gpinput const> gpinputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ltv_mpc::gpinput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ltv_mpc::gpinput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ltv_mpc::gpinput_<ContainerAllocator1> & lhs, const ::ltv_mpc::gpinput_<ContainerAllocator2> & rhs)
{
  return lhs.v == rhs.v &&
    lhs.r == rhs.r &&
    lhs.beta == rhs.beta &&
    lhs.Tf == rhs.Tf &&
    lhs.Tr == rhs.Tr &&
    lhs.Steer == rhs.Steer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ltv_mpc::gpinput_<ContainerAllocator1> & lhs, const ::ltv_mpc::gpinput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ltv_mpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ltv_mpc::gpinput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ltv_mpc::gpinput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ltv_mpc::gpinput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ltv_mpc::gpinput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ltv_mpc::gpinput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ltv_mpc::gpinput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ltv_mpc::gpinput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfd53f116b4d87a2c94142f47b445347";
  }

  static const char* value(const ::ltv_mpc::gpinput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdfd53f116b4d87a2ULL;
  static const uint64_t static_value2 = 0xc94142f47b445347ULL;
};

template<class ContainerAllocator>
struct DataType< ::ltv_mpc::gpinput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ltv_mpc/gpinput";
  }

  static const char* value(const ::ltv_mpc::gpinput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ltv_mpc::gpinput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 v\n"
"float64 r\n"
"float64 beta\n"
"float64 Tf\n"
"float64 Tr\n"
"float64 Steer\n"
;
  }

  static const char* value(const ::ltv_mpc::gpinput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ltv_mpc::gpinput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.v);
      stream.next(m.r);
      stream.next(m.beta);
      stream.next(m.Tf);
      stream.next(m.Tr);
      stream.next(m.Steer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gpinput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ltv_mpc::gpinput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ltv_mpc::gpinput_<ContainerAllocator>& v)
  {
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
    s << indent << "beta: ";
    Printer<double>::stream(s, indent + "  ", v.beta);
    s << indent << "Tf: ";
    Printer<double>::stream(s, indent + "  ", v.Tf);
    s << indent << "Tr: ";
    Printer<double>::stream(s, indent + "  ", v.Tr);
    s << indent << "Steer: ";
    Printer<double>::stream(s, indent + "  ", v.Steer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LTV_MPC_MESSAGE_GPINPUT_H
