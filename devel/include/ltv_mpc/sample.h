// Generated by gencpp from file ltv_mpc/sample.msg
// DO NOT EDIT!


#ifndef LTV_MPC_MESSAGE_SAMPLE_H
#define LTV_MPC_MESSAGE_SAMPLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ltv_mpc
{
template <class ContainerAllocator>
struct sample_
{
  typedef sample_<ContainerAllocator> Type;

  sample_()
    : x(0.0)
    , y(0.0)
    , yaw(0.0)
    , v(0.0)
    , r(0.0)
    , beta(0.0)
    , tf(0.0)
    , tr(0.0)
    , steer(0.0)
    , s(0.0)
    , time(0.0)
    , iter(0.0)
    , cost(0.0)  {
    }
  sample_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , yaw(0.0)
    , v(0.0)
    , r(0.0)
    , beta(0.0)
    , tf(0.0)
    , tr(0.0)
    , steer(0.0)
    , s(0.0)
    , time(0.0)
    , iter(0.0)
    , cost(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _v_type;
  _v_type v;

   typedef double _r_type;
  _r_type r;

   typedef double _beta_type;
  _beta_type beta;

   typedef double _tf_type;
  _tf_type tf;

   typedef double _tr_type;
  _tr_type tr;

   typedef double _steer_type;
  _steer_type steer;

   typedef double _s_type;
  _s_type s;

   typedef double _time_type;
  _time_type time;

   typedef double _iter_type;
  _iter_type iter;

   typedef double _cost_type;
  _cost_type cost;





  typedef boost::shared_ptr< ::ltv_mpc::sample_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ltv_mpc::sample_<ContainerAllocator> const> ConstPtr;

}; // struct sample_

typedef ::ltv_mpc::sample_<std::allocator<void> > sample;

typedef boost::shared_ptr< ::ltv_mpc::sample > samplePtr;
typedef boost::shared_ptr< ::ltv_mpc::sample const> sampleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ltv_mpc::sample_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ltv_mpc::sample_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ltv_mpc::sample_<ContainerAllocator1> & lhs, const ::ltv_mpc::sample_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.yaw == rhs.yaw &&
    lhs.v == rhs.v &&
    lhs.r == rhs.r &&
    lhs.beta == rhs.beta &&
    lhs.tf == rhs.tf &&
    lhs.tr == rhs.tr &&
    lhs.steer == rhs.steer &&
    lhs.s == rhs.s &&
    lhs.time == rhs.time &&
    lhs.iter == rhs.iter &&
    lhs.cost == rhs.cost;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ltv_mpc::sample_<ContainerAllocator1> & lhs, const ::ltv_mpc::sample_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ltv_mpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ltv_mpc::sample_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ltv_mpc::sample_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ltv_mpc::sample_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ltv_mpc::sample_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ltv_mpc::sample_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ltv_mpc::sample_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ltv_mpc::sample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70403b52d11f6e3bff793167877b89ed";
  }

  static const char* value(const ::ltv_mpc::sample_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70403b52d11f6e3bULL;
  static const uint64_t static_value2 = 0xff793167877b89edULL;
};

template<class ContainerAllocator>
struct DataType< ::ltv_mpc::sample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ltv_mpc/sample";
  }

  static const char* value(const ::ltv_mpc::sample_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ltv_mpc::sample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 yaw\n"
"float64 v\n"
"float64 r\n"
"float64 beta\n"
"float64 tf\n"
"float64 tr\n"
"float64 steer\n"
"float64 s\n"
"float64 time\n"
"float64 iter\n"
"float64 cost\n"
;
  }

  static const char* value(const ::ltv_mpc::sample_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ltv_mpc::sample_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.yaw);
      stream.next(m.v);
      stream.next(m.r);
      stream.next(m.beta);
      stream.next(m.tf);
      stream.next(m.tr);
      stream.next(m.steer);
      stream.next(m.s);
      stream.next(m.time);
      stream.next(m.iter);
      stream.next(m.cost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sample_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ltv_mpc::sample_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ltv_mpc::sample_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "r: ";
    Printer<double>::stream(s, indent + "  ", v.r);
    s << indent << "beta: ";
    Printer<double>::stream(s, indent + "  ", v.beta);
    s << indent << "tf: ";
    Printer<double>::stream(s, indent + "  ", v.tf);
    s << indent << "tr: ";
    Printer<double>::stream(s, indent + "  ", v.tr);
    s << indent << "steer: ";
    Printer<double>::stream(s, indent + "  ", v.steer);
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "iter: ";
    Printer<double>::stream(s, indent + "  ", v.iter);
    s << indent << "cost: ";
    Printer<double>::stream(s, indent + "  ", v.cost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LTV_MPC_MESSAGE_SAMPLE_H
