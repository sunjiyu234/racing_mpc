// Generated by gencpp from file ltv_mpc/sample_lst.msg
// DO NOT EDIT!


#ifndef LTV_MPC_MESSAGE_SAMPLE_LST_H
#define LTV_MPC_MESSAGE_SAMPLE_LST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ltv_mpc/sample.h>

namespace ltv_mpc
{
template <class ContainerAllocator>
struct sample_lst_
{
  typedef sample_lst_<ContainerAllocator> Type;

  sample_lst_()
    : sample_list()  {
    }
  sample_lst_(const ContainerAllocator& _alloc)
    : sample_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::ltv_mpc::sample_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ltv_mpc::sample_<ContainerAllocator> >> _sample_list_type;
  _sample_list_type sample_list;





  typedef boost::shared_ptr< ::ltv_mpc::sample_lst_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ltv_mpc::sample_lst_<ContainerAllocator> const> ConstPtr;

}; // struct sample_lst_

typedef ::ltv_mpc::sample_lst_<std::allocator<void> > sample_lst;

typedef boost::shared_ptr< ::ltv_mpc::sample_lst > sample_lstPtr;
typedef boost::shared_ptr< ::ltv_mpc::sample_lst const> sample_lstConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ltv_mpc::sample_lst_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ltv_mpc::sample_lst_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ltv_mpc::sample_lst_<ContainerAllocator1> & lhs, const ::ltv_mpc::sample_lst_<ContainerAllocator2> & rhs)
{
  return lhs.sample_list == rhs.sample_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ltv_mpc::sample_lst_<ContainerAllocator1> & lhs, const ::ltv_mpc::sample_lst_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ltv_mpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ltv_mpc::sample_lst_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ltv_mpc::sample_lst_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ltv_mpc::sample_lst_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ltv_mpc::sample_lst_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ltv_mpc::sample_lst_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ltv_mpc::sample_lst_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ltv_mpc::sample_lst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b7f364dc273676e8884e28e28f4d153";
  }

  static const char* value(const ::ltv_mpc::sample_lst_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b7f364dc273676eULL;
  static const uint64_t static_value2 = 0x8884e28e28f4d153ULL;
};

template<class ContainerAllocator>
struct DataType< ::ltv_mpc::sample_lst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ltv_mpc/sample_lst";
  }

  static const char* value(const ::ltv_mpc::sample_lst_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ltv_mpc::sample_lst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sample[] sample_list\n"
"================================================================================\n"
"MSG: ltv_mpc/sample\n"
"float64 x\n"
"float64 y\n"
"float64 yaw\n"
"float64 v\n"
"float64 r\n"
"float64 beta\n"
"float64 tf\n"
"float64 tr\n"
"float64 steer\n"
"float64 s\n"
"float64 time\n"
"float64 iter\n"
"float64 cost\n"
;
  }

  static const char* value(const ::ltv_mpc::sample_lst_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ltv_mpc::sample_lst_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sample_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sample_lst_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ltv_mpc::sample_lst_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ltv_mpc::sample_lst_<ContainerAllocator>& v)
  {
    s << indent << "sample_list[]" << std::endl;
    for (size_t i = 0; i < v.sample_list.size(); ++i)
    {
      s << indent << "  sample_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ltv_mpc::sample_<ContainerAllocator> >::stream(s, indent + "    ", v.sample_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LTV_MPC_MESSAGE_SAMPLE_LST_H
