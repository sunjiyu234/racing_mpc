// Generated by gencpp from file pred_msg/correct_data.msg
// DO NOT EDIT!


#ifndef PRED_MSG_MESSAGE_CORRECT_DATA_H
#define PRED_MSG_MESSAGE_CORRECT_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pred_msg
{
template <class ContainerAllocator>
struct correct_data_
{
  typedef correct_data_<ContainerAllocator> Type;

  correct_data_()
    : index_data(0)
    , correct_v(0.0)
    , correct_r(0.0)
    , correct_beta(0.0)  {
    }
  correct_data_(const ContainerAllocator& _alloc)
    : index_data(0)
    , correct_v(0.0)
    , correct_r(0.0)
    , correct_beta(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _index_data_type;
  _index_data_type index_data;

   typedef double _correct_v_type;
  _correct_v_type correct_v;

   typedef double _correct_r_type;
  _correct_r_type correct_r;

   typedef double _correct_beta_type;
  _correct_beta_type correct_beta;





  typedef boost::shared_ptr< ::pred_msg::correct_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pred_msg::correct_data_<ContainerAllocator> const> ConstPtr;

}; // struct correct_data_

typedef ::pred_msg::correct_data_<std::allocator<void> > correct_data;

typedef boost::shared_ptr< ::pred_msg::correct_data > correct_dataPtr;
typedef boost::shared_ptr< ::pred_msg::correct_data const> correct_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pred_msg::correct_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pred_msg::correct_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pred_msg::correct_data_<ContainerAllocator1> & lhs, const ::pred_msg::correct_data_<ContainerAllocator2> & rhs)
{
  return lhs.index_data == rhs.index_data &&
    lhs.correct_v == rhs.correct_v &&
    lhs.correct_r == rhs.correct_r &&
    lhs.correct_beta == rhs.correct_beta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pred_msg::correct_data_<ContainerAllocator1> & lhs, const ::pred_msg::correct_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pred_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pred_msg::correct_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pred_msg::correct_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pred_msg::correct_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pred_msg::correct_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pred_msg::correct_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pred_msg::correct_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pred_msg::correct_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41f364437c141998133be277ae3d31c7";
  }

  static const char* value(const ::pred_msg::correct_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41f364437c141998ULL;
  static const uint64_t static_value2 = 0x133be277ae3d31c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::pred_msg::correct_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pred_msg/correct_data";
  }

  static const char* value(const ::pred_msg::correct_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pred_msg::correct_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 index_data\n"
"float64 correct_v\n"
"float64 correct_r\n"
"float64 correct_beta\n"
;
  }

  static const char* value(const ::pred_msg::correct_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pred_msg::correct_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index_data);
      stream.next(m.correct_v);
      stream.next(m.correct_r);
      stream.next(m.correct_beta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct correct_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pred_msg::correct_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pred_msg::correct_data_<ContainerAllocator>& v)
  {
    s << indent << "index_data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index_data);
    s << indent << "correct_v: ";
    Printer<double>::stream(s, indent + "  ", v.correct_v);
    s << indent << "correct_r: ";
    Printer<double>::stream(s, indent + "  ", v.correct_r);
    s << indent << "correct_beta: ";
    Printer<double>::stream(s, indent + "  ", v.correct_beta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRED_MSG_MESSAGE_CORRECT_DATA_H
