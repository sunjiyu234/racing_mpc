// Generated by gencpp from file pred_msg/state_data.msg
// DO NOT EDIT!


#ifndef PRED_MSG_MESSAGE_STATE_DATA_H
#define PRED_MSG_MESSAGE_STATE_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pred_msg
{
template <class ContainerAllocator>
struct state_data_
{
  typedef state_data_<ContainerAllocator> Type;

  state_data_()
    : index_data(0)
    , input_v(0.0)
    , input_r(0.0)
    , input_beta(0.0)
    , input_Tf(0.0)
    , input_Tr(0.0)
    , input_delta(0.0)
    , input_error_v(0.0)
    , input_error_r(0.0)
    , input_error_beta(0.0)  {
    }
  state_data_(const ContainerAllocator& _alloc)
    : index_data(0)
    , input_v(0.0)
    , input_r(0.0)
    , input_beta(0.0)
    , input_Tf(0.0)
    , input_Tr(0.0)
    , input_delta(0.0)
    , input_error_v(0.0)
    , input_error_r(0.0)
    , input_error_beta(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _index_data_type;
  _index_data_type index_data;

   typedef double _input_v_type;
  _input_v_type input_v;

   typedef double _input_r_type;
  _input_r_type input_r;

   typedef double _input_beta_type;
  _input_beta_type input_beta;

   typedef double _input_Tf_type;
  _input_Tf_type input_Tf;

   typedef double _input_Tr_type;
  _input_Tr_type input_Tr;

   typedef double _input_delta_type;
  _input_delta_type input_delta;

   typedef double _input_error_v_type;
  _input_error_v_type input_error_v;

   typedef double _input_error_r_type;
  _input_error_r_type input_error_r;

   typedef double _input_error_beta_type;
  _input_error_beta_type input_error_beta;





  typedef boost::shared_ptr< ::pred_msg::state_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pred_msg::state_data_<ContainerAllocator> const> ConstPtr;

}; // struct state_data_

typedef ::pred_msg::state_data_<std::allocator<void> > state_data;

typedef boost::shared_ptr< ::pred_msg::state_data > state_dataPtr;
typedef boost::shared_ptr< ::pred_msg::state_data const> state_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pred_msg::state_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pred_msg::state_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pred_msg::state_data_<ContainerAllocator1> & lhs, const ::pred_msg::state_data_<ContainerAllocator2> & rhs)
{
  return lhs.index_data == rhs.index_data &&
    lhs.input_v == rhs.input_v &&
    lhs.input_r == rhs.input_r &&
    lhs.input_beta == rhs.input_beta &&
    lhs.input_Tf == rhs.input_Tf &&
    lhs.input_Tr == rhs.input_Tr &&
    lhs.input_delta == rhs.input_delta &&
    lhs.input_error_v == rhs.input_error_v &&
    lhs.input_error_r == rhs.input_error_r &&
    lhs.input_error_beta == rhs.input_error_beta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pred_msg::state_data_<ContainerAllocator1> & lhs, const ::pred_msg::state_data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pred_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pred_msg::state_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pred_msg::state_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pred_msg::state_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pred_msg::state_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pred_msg::state_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pred_msg::state_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pred_msg::state_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "daae5795cc22390ee753757c10fc1367";
  }

  static const char* value(const ::pred_msg::state_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdaae5795cc22390eULL;
  static const uint64_t static_value2 = 0xe753757c10fc1367ULL;
};

template<class ContainerAllocator>
struct DataType< ::pred_msg::state_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pred_msg/state_data";
  }

  static const char* value(const ::pred_msg::state_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pred_msg::state_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 index_data\n"
"float64 input_v\n"
"float64 input_r\n"
"float64 input_beta\n"
"float64 input_Tf\n"
"float64 input_Tr\n"
"float64 input_delta\n"
"float64 input_error_v\n"
"float64 input_error_r\n"
"float64 input_error_beta\n"
;
  }

  static const char* value(const ::pred_msg::state_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pred_msg::state_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index_data);
      stream.next(m.input_v);
      stream.next(m.input_r);
      stream.next(m.input_beta);
      stream.next(m.input_Tf);
      stream.next(m.input_Tr);
      stream.next(m.input_delta);
      stream.next(m.input_error_v);
      stream.next(m.input_error_r);
      stream.next(m.input_error_beta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct state_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pred_msg::state_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pred_msg::state_data_<ContainerAllocator>& v)
  {
    s << indent << "index_data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index_data);
    s << indent << "input_v: ";
    Printer<double>::stream(s, indent + "  ", v.input_v);
    s << indent << "input_r: ";
    Printer<double>::stream(s, indent + "  ", v.input_r);
    s << indent << "input_beta: ";
    Printer<double>::stream(s, indent + "  ", v.input_beta);
    s << indent << "input_Tf: ";
    Printer<double>::stream(s, indent + "  ", v.input_Tf);
    s << indent << "input_Tr: ";
    Printer<double>::stream(s, indent + "  ", v.input_Tr);
    s << indent << "input_delta: ";
    Printer<double>::stream(s, indent + "  ", v.input_delta);
    s << indent << "input_error_v: ";
    Printer<double>::stream(s, indent + "  ", v.input_error_v);
    s << indent << "input_error_r: ";
    Printer<double>::stream(s, indent + "  ", v.input_error_r);
    s << indent << "input_error_beta: ";
    Printer<double>::stream(s, indent + "  ", v.input_error_beta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRED_MSG_MESSAGE_STATE_DATA_H
