# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ltv_mpc/gp_srvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ltv_mpc.msg

class gp_srvRequest(genpy.Message):
  _md5sum = "6c2b789bc37b75ef90e43a0e84365208"
  _type = "ltv_mpc/gp_srvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """gpinput gp_input_now

================================================================================
MSG: ltv_mpc/gpinput
float64 v
float64 r
float64 beta
float64 Tf
float64 Tr
float64 Steer"""
  __slots__ = ['gp_input_now']
  _slot_types = ['ltv_mpc/gpinput']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gp_input_now

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gp_srvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gp_input_now is None:
        self.gp_input_now = ltv_mpc.msg.gpinput()
    else:
      self.gp_input_now = ltv_mpc.msg.gpinput()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.gp_input_now.v, _x.gp_input_now.r, _x.gp_input_now.beta, _x.gp_input_now.Tf, _x.gp_input_now.Tr, _x.gp_input_now.Steer))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gp_input_now is None:
        self.gp_input_now = ltv_mpc.msg.gpinput()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.gp_input_now.v, _x.gp_input_now.r, _x.gp_input_now.beta, _x.gp_input_now.Tf, _x.gp_input_now.Tr, _x.gp_input_now.Steer,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.gp_input_now.v, _x.gp_input_now.r, _x.gp_input_now.beta, _x.gp_input_now.Tf, _x.gp_input_now.Tr, _x.gp_input_now.Steer))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gp_input_now is None:
        self.gp_input_now = ltv_mpc.msg.gpinput()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.gp_input_now.v, _x.gp_input_now.r, _x.gp_input_now.beta, _x.gp_input_now.Tf, _x.gp_input_now.Tr, _x.gp_input_now.Steer,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ltv_mpc/gp_srvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ltv_mpc.msg

class gp_srvResponse(genpy.Message):
  _md5sum = "0b3f30157fff2a48622f40da7c543041"
  _type = "ltv_mpc/gp_srvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """gpoutput gp_output_now

================================================================================
MSG: ltv_mpc/gpoutput
float64 v_error
float64 r_error
float64 beta_error"""
  __slots__ = ['gp_output_now']
  _slot_types = ['ltv_mpc/gpoutput']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gp_output_now

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gp_srvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gp_output_now is None:
        self.gp_output_now = ltv_mpc.msg.gpoutput()
    else:
      self.gp_output_now = ltv_mpc.msg.gpoutput()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.gp_output_now.v_error, _x.gp_output_now.r_error, _x.gp_output_now.beta_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gp_output_now is None:
        self.gp_output_now = ltv_mpc.msg.gpoutput()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.gp_output_now.v_error, _x.gp_output_now.r_error, _x.gp_output_now.beta_error,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.gp_output_now.v_error, _x.gp_output_now.r_error, _x.gp_output_now.beta_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gp_output_now is None:
        self.gp_output_now = ltv_mpc.msg.gpoutput()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.gp_output_now.v_error, _x.gp_output_now.r_error, _x.gp_output_now.beta_error,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
class gp_srv(object):
  _type          = 'ltv_mpc/gp_srv'
  _md5sum = '44a6e9c0a8d485a5d5e43661bad4e2ba'
  _request_class  = gp_srvRequest
  _response_class = gp_srvResponse
