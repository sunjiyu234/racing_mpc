# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pred_msg/state_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class state_data(genpy.Message):
  _md5sum = "daae5795cc22390ee753757c10fc1367"
  _type = "pred_msg/state_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 index_data
float64 input_v
float64 input_r
float64 input_beta
float64 input_Tf
float64 input_Tr
float64 input_delta
float64 input_error_v
float64 input_error_r
float64 input_error_beta
"""
  __slots__ = ['index_data','input_v','input_r','input_beta','input_Tf','input_Tr','input_delta','input_error_v','input_error_r','input_error_beta']
  _slot_types = ['int32','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       index_data,input_v,input_r,input_beta,input_Tf,input_Tr,input_delta,input_error_v,input_error_r,input_error_beta

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(state_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.index_data is None:
        self.index_data = 0
      if self.input_v is None:
        self.input_v = 0.
      if self.input_r is None:
        self.input_r = 0.
      if self.input_beta is None:
        self.input_beta = 0.
      if self.input_Tf is None:
        self.input_Tf = 0.
      if self.input_Tr is None:
        self.input_Tr = 0.
      if self.input_delta is None:
        self.input_delta = 0.
      if self.input_error_v is None:
        self.input_error_v = 0.
      if self.input_error_r is None:
        self.input_error_r = 0.
      if self.input_error_beta is None:
        self.input_error_beta = 0.
    else:
      self.index_data = 0
      self.input_v = 0.
      self.input_r = 0.
      self.input_beta = 0.
      self.input_Tf = 0.
      self.input_Tr = 0.
      self.input_delta = 0.
      self.input_error_v = 0.
      self.input_error_r = 0.
      self.input_error_beta = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i9d().pack(_x.index_data, _x.input_v, _x.input_r, _x.input_beta, _x.input_Tf, _x.input_Tr, _x.input_delta, _x.input_error_v, _x.input_error_r, _x.input_error_beta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.index_data, _x.input_v, _x.input_r, _x.input_beta, _x.input_Tf, _x.input_Tr, _x.input_delta, _x.input_error_v, _x.input_error_r, _x.input_error_beta,) = _get_struct_i9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i9d().pack(_x.index_data, _x.input_v, _x.input_r, _x.input_beta, _x.input_Tf, _x.input_Tr, _x.input_delta, _x.input_error_v, _x.input_error_r, _x.input_error_beta))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 76
      (_x.index_data, _x.input_v, _x.input_r, _x.input_beta, _x.input_Tf, _x.input_Tr, _x.input_delta, _x.input_error_v, _x.input_error_r, _x.input_error_beta,) = _get_struct_i9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i9d = None
def _get_struct_i9d():
    global _struct_i9d
    if _struct_i9d is None:
        _struct_i9d = struct.Struct("<i9d")
    return _struct_i9d
